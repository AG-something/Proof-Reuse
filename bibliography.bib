@inproceedings{Poll1997,
booktitle = {Proceedings of TYPES'97 Workshop on Subtyping, inheritance and modular development of proofs, Durham, UK},
month = {September},
title = {Subtyping and Inheritance for Inductive Types},
author = {Erik Poll},
year = {1997},
journal = {Proceedings of TYPES'97 Workshop on Subtyping, inheritance and modular development of proofs, Durham, UK},
keywords = {subtyping},
url = {https://kar.kent.ac.uk/21456/},
abstract = {Inheritance and subtyping are key features of object-oriented languages. We show that there are corresponding (or, more precisely, dual) notions for inductive or algebraic datatypes: there is a natural notion of subtyping for these types and an associated form of code reuse (inheritance) for programs on these types. Inheritance and subtyping for inductive types not only suggest possible extensions of functional programming languages, but also provide a new perspective on inheritance as we know it from object-oriented languages, which may help in getting a better understanding of this notion.}
}


@article{Aspinall2001,
title = {Subtyping dependent types},
journal = {Theoretical Computer Science},
volume = {266},
number = {1},
pages = {273-309},
year = {2001},
issn = {0304-3975},
doi = {https://doi.org/10.1016/S0304-3975(00)00175-4},
url = {https://www.sciencedirect.com/science/article/pii/S0304397500001754},
author = {David Aspinall and Adriana Compagnoni},
keywords = {Type theory, Dependent types, Subtyping},
abstract = {The need for subtyping in type systems with dependent types has been realized for some years. But it is hard to prove that systems combining the two features have fundamental properties such as subject reduction. Here we investigate a subtyping extension of the system λP, which is an abstract version of the type system of the Edinburgh Logical Framework LF. By using an equivalent formulation, we establish some important properties of the new system λP⩽, including subject reduction. Our analysis culminates in a complete and terminating algorithm which establishes the decidability of type-checking.}
}



@article{LovasPfenning2008,
title = {A Bidirectional Refinement Type System for LF},
journal = {Electronic Notes in Theoretical Computer Science},
volume = {196},
pages = {113-128},
year = {2008},
note = {Proceedings of the Second International Workshop on Logical Frameworks and Meta-Languages: Theory and Practice (LFMTP 2007)},
issn = {1571-0661},
doi = {https://doi.org/10.1016/j.entcs.2007.09.021},
url = {https://www.sciencedirect.com/science/article/pii/S1571066108000418},
author = {William Lovas and Frank Pfenning},
keywords = {LF, refinement types, subtyping, dependent types, intersection types},
abstract = {We present a system of refinement types for LF in the style of recent formulations where only canonical forms are well-typed. Both the usual LF rules and the rules for type refinements are bidirectional, leading to a straightforward proof of decidability of type-checking even in the presence of intersection types. Because we insist on canonical forms, structural rules for subtyping can now be derived rather than being assumed as primitive. We illustrate the expressive power of our system with several examples in the domain of logics and programming languages.}
}


@inproceedings{McBride2014,
  title={Ornamental Algebras, Algebraic Ornaments},
  author={Conor McBride},
  year={2014}
}


@article{FreemanPfenning1991,
author = {Freeman, Tim and Pfenning, Frank},
title = {Refinement Types for ML},
year = {1991},
issue_date = {June 1991},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {26},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/113446.113468},
doi = {10.1145/113446.113468},
journal = {SIGPLAN Not.},
month = {may},
pages = {268–277},
numpages = {10}
}

@inbook{FreemanPfenning1991,
author = {Freeman, Tim and Pfenning, Frank},
title = {Refinement Types for ML},
year = {1991},
isbn = {0897914287},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/113445.113468},
booktitle = {Proceedings of the ACM SIGPLAN 1991 Conference on Programming Language Design and Implementation},
pages = {268–277},
numpages = {10}
}


@INPROCEEDINGS{DagandMcBride2013,
author={Dagand, Pierre-Évariste and McBride, Conor},
booktitle={2013 28th Annual ACM/IEEE Symposium on Logic in Computer Science}, 
title={A Categorical Treatment of Ornaments},   year={2013},  volume={},
number={},  
pages={530-539},  
doi={10.1109/LICS.2013.60}
}


@article{LovasPfenning2010,
doi = {10.2168/lmcs-6(4:5)2010},  
url = {https://doi.org/10.2168{\%}2Flmcs-6{\%}284{\%}3A5{\%}292010},  
year = 2010,
month = {dec},  
publisher = {Centre pour la Communication Scientifique Directe ({CCSD})}, 
volume = {6},  
number = {4},  
author = {William Lovas and Frank Pfenning}, 
editor = {Pierre-Louis Curien}, 
title = {Refinement Types for Logical Frameworks and Their Interpretation as Proof Irrelevance},  
journal = {Logical Methods in Computer Science}
}


@InProceedings{BarthesFrade1999,
author="Barthe, Gilles
and Frade, Maria Jo{\~a}o",
editor="Swierstra, S. Doaitse",
title="Constructor Subtyping",
booktitle="Programming Languages and Systems",
year="1999",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="109--127",
abstract="Constructor subtyping is a form of subtyping in which an inductive type $\sigma$ is viewed as a subtype of another inductive type $\tau$ if $\tau$ has more constructors than $\sigma$. As suggested in [5,12], its (potential) uses include proof assistants and functional programming languages.",
isbn="978-3-540-49099-9"
}


@article{Nanevski2008,
author    = {Aleksandar Nanevski and
             Frank Pfenning and
             Brigitte Pientka},
title     = {Contextual modal type theory},
journal   = {{ACM} Trans. Comput. Log.},
volume    = {9},
number    = {3},
pages     = {23:1--23:49},
year      = {2008},
url       = {https://doi.org/10.1145/1352582.1352591},
doi       = {10.1145/1352582.1352591},
timestamp = {Tue, 06 Nov 2018 12:51:53 +0100},
biburl    = {https://dblp.org/rec/journals/tocl/NanevskiPP08.bib},
bibsource = {dblp computer science bibliography, https://dblp.org}
}




@inproceedings{Pientka2008,
author    = {Brigitte Pientka},
editor    = {George C. Necula and
               Philip Wadler},
title     = {A type-theoretic foundation for programming with higher-order abstract syntax and first-class substitutions},
booktitle = {Proceedings of the 35th {ACM} {SIGPLAN-SIGACT} Symposium on Principles of Programming Languages, {POPL} 2008, San Francisco, California, USA, January 7-12, 2008},
pages     = {371--382},
publisher = {{ACM}},
year      = {2008},
url       = {https://doi.org/10.1145/1328438.1328483},
doi       = {10.1145/1328438.1328483},
timestamp = {Fri, 25 Jun 2021 14:48:54 +0200},
biburl    = {https://dblp.org/rec/conf/popl/Pientka08.bib},
bibsource = {dblp computer science bibliography, https://dblp.org}
}



@inproceedings{PientkaDunfield2008,
author    = {Brigitte Pientka and
               Jana Dunfield},
editor    = {Sergio Antoy and
               Elvira Albert},
title     = {Programming with proofs and explicit contexts},
booktitle = {Proceedings of the 10th International {ACM} {SIGPLAN} Conference on Principles and Practice of Declarative Programming, July 15-17, 2008, Valencia, Spain},
pages     = {163--173},
publisher = {{ACM}},
year      = {2008},
url       = {https://doi.org/10.1145/1389449.1389469},
doi       = {10.1145/1389449.1389469},
timestamp = {Fri, 11 Dec 2020 08:12:20 +0100},
biburl    = {https://dblp.org/rec/conf/ppdp/PientkaD08.bib},
bibsource = {dblp computer science bibliography, https://dblp.org}
}




@inproceedings{LF1987,
author    = {Robert Harper and
               Furio Honsell and
               Gordon D. Plotkin},
title     = {A Framework for Defining Logics},
booktitle = {Proceedings of the Symposium on Logic in Computer Science {(LICS}'87), Ithaca, New York, USA, June 22-25, 1987},
pages     = {194--204},
publisher = {{IEEE} Computer Society},
year      = {1987},
timestamp = {Tue, 14 Mar 2017 11:56:50 +0100},
biburl    = {https://dblp.org/rec/conf/lics/HarperHP87.bib},
bibsource = {dblp computer science bibliography, https://dblp.org}
}



@misc{McBride2011,
title={Ornamental Algebras, Algebraic Ornaments},
author={Conor McBride},
year={2011}
}